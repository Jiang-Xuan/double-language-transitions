[MUSIC PLAYING]
[MUSIC PLAYING]

KAYCE BASQUES: Greetings
KAYCE BASQUES: 欢迎

Chrome 71 has arrived.
Chrome 71 已经到来

Here's what's new in DevTools.
这里是开发者工具的新特性

Back in Chrome 70, we shipped Live Expressions,
回到 Chrome 70, 我们上线了 Live Expressions,

which let you pin an expression to the top of your console
它允许你在你的 console 的上方定住一个表达式

and monitor its value in real time.
并实时监视它的值

In Chrome 71, when you hover over a live espression that
在 Chrome 71 中, 当你悬浮在一个表达式之上, 其

point to a DOM node, DevTools highlights
指向一个 DOM 节点, 开发者工具会

that node in the viewport.
在视口中高亮这个节点.

To create a live expression, click
创建一个 live expression, 点击

this little eye of Mordor icon.
摩多(比喻: 托尔金魔幻小说中中土世界黑暗魔君索伦的领地)图符的小眼睛

Type the expression, then click outside of the UI to save it
输入表达式, 然后点击 UI 之外来保存它

Here, I'm watching document.activeElement, which
这里, 我正在监听 document.activeElement, 它

tell me what node has focus.
告诉我当前被聚焦的节点.

When I hover over the result, DevTools
当我悬浮在结果之上的时候, 开发者工具

shows the node's box model in the viewport.
在可视窗口中显示节点的盒模型.

When working in the console or Elements panel,
当在 console 或者是 Elements 面板工作的时候

you can now store DOM nodes as global variables.
你现在可以存储 DOM 节点为全局变量

Suppose I want to quickly get a reference to this button node.
假如我想快速的得到这个 button 节点的引用.


Before Chrome 71, I'd have to do something hacky,
在 Chrome 71 之前, 我必须做一些技巧,

like select the node in the DOM tree,
在 DOM 树中选中节点,

then assign dollar sign 0 to a console.
然后将 $0 赋值给 console.

Now, you can just right click the DOM tree
现在, 你只要在 DOM 树中右击

and select Store as Global Variable.
然后选择 Store as Global Variable.

If you're logging nodes to the console,
如果你将节点打印至 console,

you can right click the result and select Store as Global Variable from there, too.
你也可以从这里右击结果, 然后选择 Store as Global Variable.

HAR files let you share network logs with your teammates.
HAR 文件允许你和你的同事分享网络日志.

DevTools' HAR files now contain custome fields for initiator and priority information.
开发者工具 HAR 文件现在包含自定义的 initiator 和 priority 字段信息.

The initiator field tells you why the resource was
initiator 字段告诉你该资源为什么

downloaded, and the priority field
被下载, priority 字段

tells you what download priority Chrome
告诉你 Chrome 赋予该资源

assigned to the resource.
什么样的下载优先级.

To export a HAR file, first capture some network traffic,
想导出一个 HAR 文件, 首先捕获一些网络流量,

then right click and select Save All as HAR with Content.
然后右击, 然后选择 Save All as HAR with Content.

The new fields are called underscore initiator and underscore priority.
新的字段命名为 _initiator 和 _priority.

The underscore means that they are custom fields, not
下划线意味着它们是自定义字段, 不是

part of the HAR spec.
HAR 规范的一部分.

To import a HAR file back into DevTools,
要导入一个 HAR 文件回到 DevTools.

just drag and drop it into the Network panel.
只要拖拽并且放下该文件到 Network 面板.

You'll notice that the inititor and priority columns now
你会发现 initiator 和 priority 列, 在输入之后, 现在

get property populated after an input.
已经正确填充.

If you can't see these columns, right click the table header
如果你没有看到这些列, 右击表格头部

and enable them.
并且开启它们.

You can now access the Command menu from the main menu.
你现在可以从主菜单访问命令菜单.

Click the three dots icon to open the main menu,
点击这个三点图标来打开主菜单,

then select Run Command.
然后选择 Run Command.

From here, you can do lots of handy stuff,
从这里, 你可以做很多方便的东西,

such as open panels, open drawers,
比如打开面板, 打开 drawers,

change the appearance of Devtools, and so on.
改变 DevTools 的外观等等.

Her's bonus tip.
这里是惊喜提示.

To view the event fired on an element, use monitorEvents
要看到一个元素的事件触发, 使用 monitorEvents.

In this demo, I've got a big button.
在该 demo 中, 我有一个大 button.

I want to add a red border to the button
我想要给这个 button 添加一个红色的 border

when I focus it, and then type R-E-D.
在我聚焦它, 然后键入 R-E-D 的时候.

But I don't know the names of the events
但是我不知道我为了要做这个需要的

that I need in order to do this.
这些事件的名字.

So I right click the node in the DOM tree
所以我在 DOM 树中右击该节点

and user our handy new Store as Global Variable feature
然后使用我们的方便的新的 Store as Global Variable 特性

to get a reference to it.
来获取一个它的引用.

Then I call monitorEvents and pass node as the first argument.
然后我调用 monitorEvents 并且传入该节点作为第一个参数.

Now, when I hover over the button,
现在, 当我悬浮在这个 button 之上的时候,

we see a bunch of mouse move and pointer move events.
我们看到了一堆 mouse move 和 pointer move 事件.

When I click the button, we see the trusty click event,
当我点击这个 button 的时候, 我们看到这个我们都知道和喜欢的

which we all knoe and love.
可信任的点击事件.

When I press Tab to focus the node, we see a focus event.
当我按下 Tab 来聚焦该节点的时候, 我们看到了一个 focus 事件.

Last, when I type R, we see key down, key press, and key
最后, 当我键入 R, 我们看到了 key down, key press, 和 key

up event.
up 事件.

Same for E and D.
E 和 D 也是一样.

So it looks like I just need the key press events to get this feature working.
所以看起来我只需要 key press 事件来让这个特性(按下 R-E-D 添加红色 border)工作.

And indeed. over here I got a sample
确实如此, 这里我有一个例子

working using only the key press events.
仅仅使用 key press 事件来工作.

When you want to stop monitoring a node's events,

call unmonitorEvents, and pass the node as the first argument

again.

You can also limit what events get

logged by passing an array as the second argument, where

each item of the array is the name of an event

that you care about, such as key press and focus.

We also have a few shorthand codes

that lat you monitor a group of related events all at once.

For example, passing the mouse code

tells DevTools to log all mouse-related events.

Check out the monitorEvents API reference to learn more.

Thanks for wantching.

See you to six weeks for Chrome 72.

[MUSIC PLAYING]
[MUSIC PLAYING]

